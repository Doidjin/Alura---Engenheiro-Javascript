{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","erro","Error","listaTodos","NegociacaoController","connection","apagaTodos","listaAtual","obterNegociacoesDaSemana","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\n\n    constructor(){\n\n        this._http = new HttpService();\n    }\n\n        obterNegociacoesDaSemana() {\n            return new Promise((resolve, reject) => {\n\n                this._http\n                    .get('negociacoes/semana')\n                    .then(negociacoes => {\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        reject('Não foi possível obter as negociações da semana');\n                    });\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n            return new Promise((resolve, reject) => {\n                this._http\n                    .get('negociacoes/anterior')\n                    .then(negociacoes => {\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        reject('Não foi possível obter as negociações da semana');\n                    });\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject('Não foi possível obter as negociações da semana');\n                });\n        });\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação');\n            });\n    }\n\n    lista(){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoController(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            })\n    }\n\n    importa(listaAtual) {\n\n       return this.obterNegociacoesDaSemana()\n           .then(negociacoes =>\n               negociacoes.filter(negociacao =>\n                   !listaAtual.some(negociacaoExistente =>\n                       JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n           )\n           .catch(erro => {\n               console.log(erro);\n               throw new Error(\"Não foi possível importar as negociações\");\n           });\n   }\n\n} "]}