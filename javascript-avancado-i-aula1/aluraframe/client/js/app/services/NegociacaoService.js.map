{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","error","negociacao","getConnection","conexao","dao","adiciona","erro","Error","listaTodos","NegociacaoController","connection","apagaTodos","listaAtual","obterNegociacoesDaSemana","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService{\n\n    constructor(){\n\n        this._http = new HttpService();\n    }\n\n        obterNegociacoesDaSemana() {\n            return new Promise((resolve, reject) => {\n\n                this._http\n                    .get('negociacoes/semana')\n                    .then(negociacoes => {\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        reject('Não foi possível obter as negociações da semana');\n                    });\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n            return new Promise((resolve, reject) => {\n                this._http\n                    .get('negociacoes/anterior')\n                    .then(negociacoes => {\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        reject('Não foi possível obter as negociações da semana');\n                    });\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(error => {\n                    console.log(error);\n                    reject('Não foi possível obter as negociações da semana');\n                });\n        });\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação cadastrada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação');\n            });\n    }\n\n    lista(){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações');\n            });\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoController(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            })\n    }\n\n    importa(listaAtual) {\n\n       return this.obterNegociacoesDaSemana()\n           .then(negociacoes =>\n               negociacoes.filter(negociacao =>\n                   !listaAtual.some(negociacaoExistente =>\n                       JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\n           )\n           .catch(erro => {\n               console.log(erro);\n               throw new Error(\"Não foi possível importar as negociações\");\n           });\n   }\n\n} "]}